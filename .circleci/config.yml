# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

jobs:
  service-test: 
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-pip-dependencies-{{ checksum "service/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-pip-dependencies-
      - run:
          working_directory: service
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      - save_cache:
          paths: [service/venv]
          key: v1-pip-dependencies-{{ checksum "service/requirements.txt" }}
      - run:
          working_directory: service
          name: Run unit tests
          command: |
            . venv/bin/activate
            make test

  service-lint:
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-pip-dependencies-{{ checksum "service/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-pip-dependencies-
      - run:
          working_directory: service
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      - save_cache:
          paths: [service/venv]
          key: v1-pip-dependencies-{{ checksum "service/requirements.txt" }}
      - run:
          working_directory: service
          name: Run linters
          command: |
            . venv/bin/activate
            make lint

  service-docker-build-scan-push:
    docker:
      - image: cimg/base:current
        auth:
          username: $DOCKERHUB_ACCESS_ID
          password: $DOCKERHUB_ACCESS_TOKEN
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: install grype
          command: |
            curl -s https://api.github.com/repos/anchore/grype/releases/latest | grep \"https.*grype.*linux_amd64.tar.gz\" | cut -d : -f 2,3 | tr -d \\\" | wget -qi - && tar -xvzf grype*.tar.gz grype && ./grype version
      - run:
          working_directory: service
          name: build docker image
          command: |
            DOCKER_IMAGE_TAG=$DOCKERHUB_ACCESS_ID/${CIRCLE_PROJECT_REPONAME,,}:${CIRCLE_WORKFLOW_ID:0:7}
            sed -i "s/%HASH%/${CIRCLE_WORKFLOW_ID:0:7}/g" app.py
            docker build -t ${DOCKER_IMAGE_TAG} .
      - run:
          name: scan docker vulnerabilities
          command: |
            DOCKER_IMAGE_TAG=$DOCKERHUB_ACCESS_ID/${CIRCLE_PROJECT_REPONAME,,}:${CIRCLE_WORKFLOW_ID:0:7}
            ./grype -f critical ${DOCKER_IMAGE_TAG}
      - run:
          working_directory: service
          name: push docker image
          command: |
            DOCKER_IMAGE_TAG=$DOCKERHUB_ACCESS_ID/${CIRCLE_PROJECT_REPONAME,,}:${CIRCLE_WORKFLOW_ID:0:7}
            echo $DOCKERHUB_ACCESS_TOKEN | docker login -u $DOCKERHUB_ACCESS_ID --password-stdin
            docker push ${DOCKER_IMAGE_TAG}
    
  service-eks-deploy:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - run:
          working_directory: service
          name: Install dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && unzip awscliv2.zip && sudo ./aws/install &&  aws --version
            curl -LO https://dl.k8s.io/release/v1.27.2/bin/linux/amd64/kubectl && chmod +x kubectl && ./kubectl version --client
      - run:
          working_directory: service
          name: Check AWS CLI
          command: |
            aws eks list-clusters
            aws eks update-kubeconfig --name udacity
            sed -i "s/latest/${CIRCLE_WORKFLOW_ID:0:7}/g" deployment.yml
            ./kubectl apply -f deployment.yml

# Invoke jobs via workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  default: 
    jobs:
      - service-test
      - service-lint
      - service-docker-build-scan-push:
          requires: [service-test, service-lint]
      - service-eks-deploy:
          requires: [service-docker-build-scan-push]
